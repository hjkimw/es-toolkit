import { castArray } from './array/castArray.ts';
import { chunk } from './array/chunk.ts';
import { compact } from './array/compact.ts';
import { concat } from './array/concat.ts';
import { difference } from './array/difference.ts';
import { differenceBy } from './array/differenceBy.ts';
import { differenceWith } from './array/differenceWith.ts';
import { drop } from './array/drop.ts';
import { dropRight } from './array/dropRight.ts';
import { dropRightWhile } from './array/dropRightWhile.ts';
import { dropWhile } from './array/dropWhile.ts';
import { every } from './array/every.ts';
import { fill } from './array/fill.ts';
import { filter } from './array/filter.ts';
import { find } from './array/find.ts';
import { findIndex } from './array/findIndex.ts';
import { findLast } from './array/findLast.ts';
import { findLastIndex } from './array/findLastIndex.ts';
import { flatten } from './array/flatten.ts';
import { flattenDeep } from './array/flattenDeep.ts';
import { flattenDepth } from './array/flattenDepth.ts';
import { forEach as each } from './array/forEach.ts';
import { forEach } from './array/forEach.ts';
import { head } from './array/head.ts';
import { head as first } from './array/head.ts';
import { includes } from './array/includes.ts';
import { indexOf } from './array/indexOf.ts';
import { intersection } from './array/intersection.ts';
import { intersectionBy } from './array/intersectionBy.ts';
import { intersectionWith } from './array/intersectionWith.ts';
import { join } from './array/join.ts';
import { last } from './array/last.ts';
import { lastIndexOf } from './array/lastIndexOf.ts';
import { map } from './array/map.ts';
import { nth } from './array/nth.ts';
import { orderBy } from './array/orderBy.ts';
import { pull } from './array/pull.ts';
import { pullAll } from './array/pullAll.ts';
import { pullAllBy } from './array/pullAllBy.ts';
import { reduce } from './array/reduce.ts';
import { reduceRight } from './array/reduceRight.ts';
import { reject } from './array/reject.ts';
import { remove } from './array/remove.ts';
import { reverse } from './array/reverse.ts';
import { sample } from './array/sample.ts';
import { size } from './array/size.ts';
import { slice } from './array/slice.ts';
import { some } from './array/some.ts';
import { sortBy } from './array/sortBy.ts';
import { sortedIndex } from './array/sortedIndex.ts';
import { sortedIndexBy } from './array/sortedIndexBy.ts';
import { sortedIndexOf } from './array/sortedIndexOf.ts';
import { sortedLastIndex } from './array/sortedLastIndex.ts';
import { sortedLastIndexBy } from './array/sortedLastIndexBy.ts';
import { tail } from './array/tail.ts';
import { take } from './array/take.ts';
import { takeRight } from './array/takeRight.ts';
import { takeRightWhile } from './array/takeRightWhile.ts';
import { takeWhile } from './array/takeWhile.ts';
import { union } from './array/union.ts';
import { unionBy } from './array/unionBy.ts';
import { unionWith } from './array/unionWith.ts';
import { uniq } from './array/uniq.ts';
import { uniqBy } from './array/uniqBy.ts';
import { uniqWith } from './array/uniqWith.ts';
import { unzip } from './array/unzip.ts';
import { without } from './array/without.ts';
import { zip } from './array/zip.ts';
import { zipObjectDeep } from './array/zipObjectDeep.ts';
import { after } from './function/after.ts';
import { ary } from './function/ary.ts';
import { attempt } from './function/attempt.ts';
import { before } from './function/before.ts';
import { bind } from './function/bind.ts';
import { bindKey } from './function/bindKey.ts';
import { curry } from './function/curry.ts';
import { curryRight } from './function/curryRight.ts';
import { debounce } from './function/debounce.ts';
import { defer } from './function/defer.ts';
import { delay } from './function/delay.ts';
import { flip } from './function/flip.ts';
import { flow } from './function/flow.ts';
import { flowRight } from './function/flowRight.ts';
import { negate } from './function/negate.ts';
import { nthArg } from './function/nthArg.ts';
import { partial } from './function/partial.ts';
import { partialRight } from './function/partialRight.ts';
import { rearg } from './function/rearg.ts';
import { rest } from './function/rest.ts';
import { spread } from './function/spread.ts';
import { throttle } from './function/throttle.ts';
import { add } from './math/add.ts';
import { ceil } from './math/ceil.ts';
import { clamp } from './math/clamp.ts';
import { divide } from './math/divide.ts';
import { floor } from './math/floor.ts';
import { inRange } from './math/inRange.ts';
import { max } from './math/max.ts';
import { maxBy } from './math/maxBy.ts';
import { mean } from './math/mean.ts';
import { meanBy } from './math/meanBy.ts';
import { min } from './math/min.ts';
import { minBy } from './math/minBy.ts';
import { multiply } from './math/multiply.ts';
import { parseInt } from './math/parseInt.ts';
import { random } from './math/random.ts';
import { range } from './math/range.ts';
import { rangeRight } from './math/rangeRight.ts';
import { round } from './math/round.ts';
import { subtract } from './math/subtract.ts';
import { sum } from './math/sum.ts';
import { sumBy } from './math/sumBy.ts';
import { assign } from './object/assign.ts';
import { assignIn } from './object/assignIn.ts';
import { assignIn as extend } from './object/assignIn.ts';
import { assignInWith } from './object/assignInWith.ts';
import { assignInWith as extendWith } from './object/assignInWith.ts';
import { assignWith } from './object/assignWith.ts';
import { cloneDeep } from './object/cloneDeep.ts';
import { cloneDeepWith } from './object/cloneDeepWith.ts';
import { create } from './object/create.ts';
import { defaults } from './object/defaults.ts';
import { findKey } from './object/findKey.ts';
import { fromPairs } from './object/fromPairs.ts';
import { functions } from './object/functions.ts';
import { functionsIn } from './object/functionsIn.ts';
import { get } from './object/get.ts';
import { has } from './object/has.ts';
import { invertBy } from './object/invertBy.ts';
import { keys } from './object/keys.ts';
import { keysIn } from './object/keysIn.ts';
import { mapKeys } from './object/mapKeys.ts';
import { mapValues } from './object/mapValues.ts';
import { merge } from './object/merge.ts';
import { mergeWith } from './object/mergeWith.ts';
import { omit } from './object/omit.ts';
import { pick } from './object/pick.ts';
import { pickBy } from './object/pickBy.ts';
import { property } from './object/property.ts';
import { propertyOf } from './object/propertyOf.ts';
import { set } from './object/set.ts';
import { toDefaulted } from './object/toDefaulted.ts';
import { toPairs } from './object/toPairs.ts';
import { toPairsIn } from './object/toPairsIn.ts';
import { unset } from './object/unset.ts';
import { update } from './object/update.ts';
import { updateWith } from './object/updateWith.ts';
import { values } from './object/values.ts';
import { valuesIn } from './object/valuesIn.ts';
import { conforms } from './predicate/conforms.ts';
import { conformsTo } from './predicate/conformsTo.ts';
import { isArguments } from './predicate/isArguments.ts';
import { isArray } from './predicate/isArray.ts';
import { isArrayBuffer } from './predicate/isArrayBuffer.ts';
import { isArrayLike } from './predicate/isArrayLike.ts';
import { isArrayLikeObject } from './predicate/isArrayLikeObject.ts';
import { isBoolean } from './predicate/isBoolean.ts';
import { isBuffer } from './predicate/isBuffer.ts';
import { isDate } from './predicate/isDate.ts';
import { isElement } from './predicate/isElement.ts';
import { isEmpty } from './predicate/isEmpty.ts';
import { isEqualWith } from './predicate/isEqualWith.ts';
import { isError } from './predicate/isError.ts';
import { isFinite } from './predicate/isFinite.ts';
import { isInteger } from './predicate/isInteger.ts';
import { isMap } from './predicate/isMap.ts';
import { isMatch } from './predicate/isMatch.ts';
import { isNaN } from './predicate/isNaN.ts';
import { isNil } from './predicate/isNil.ts';
import { isNumber } from './predicate/isNumber.ts';
import { isObject } from './predicate/isObject.ts';
import { isObjectLike } from './predicate/isObjectLike.ts';
import { isPlainObject } from './predicate/isPlainObject.ts';
import { isRegExp } from './predicate/isRegExp.ts';
import { isSafeInteger } from './predicate/isSafeInteger.ts';
import { isSet } from './predicate/isSet.ts';
import { isString } from './predicate/isString.ts';
import { isSymbol } from './predicate/isSymbol.ts';
import { isTypedArray } from './predicate/isTypedArray.ts';
import { isWeakMap } from './predicate/isWeakMap.ts';
import { isWeakSet } from './predicate/isWeakSet.ts';
import { matches } from './predicate/matches.ts';
import { matchesProperty } from './predicate/matchesProperty.ts';
import { camelCase } from './string/camelCase.ts';
import { deburr } from './string/deburr.ts';
import { endsWith } from './string/endsWith.ts';
import { escape } from './string/escape.ts';
import { escapeRegExp } from './string/escapeRegExp.ts';
import { kebabCase } from './string/kebabCase.ts';
import { lowerCase } from './string/lowerCase.ts';
import { lowerFirst } from './string/lowerFirst.ts';
import { pad } from './string/pad.ts';
import { padEnd } from './string/padEnd.ts';
import { padStart } from './string/padStart.ts';
import { repeat } from './string/repeat.ts';
import { replace } from './string/replace.ts';
import { snakeCase } from './string/snakeCase.ts';
import { startCase } from './string/startCase.ts';
import { startsWith } from './string/startsWith.ts';
import { template, templateSettings } from './string/template.ts';
import { toLower } from './string/toLower.ts';
import { toUpper } from './string/toUpper.ts';
import { trim } from './string/trim.ts';
import { trimEnd } from './string/trimEnd.ts';
import { trimStart } from './string/trimStart.ts';
import { unescape } from './string/unescape.ts';
import { upperCase } from './string/upperCase.ts';
import { upperFirst } from './string/upperFirst.ts';
import { words } from './string/words.ts';
import { cond } from './util/cond.ts';
import { constant } from './util/constant.ts';
import { defaultTo } from './util/defaultTo.ts';
import { eq } from './util/eq.ts';
import { gt } from './util/gt.ts';
import { gte } from './util/gte.ts';
import { invoke } from './util/invoke.ts';
import { iteratee } from './util/iteratee.ts';
import { lt } from './util/lt.ts';
import { lte } from './util/lte.ts';
import { method } from './util/method.ts';
import { methodOf } from './util/methodOf.ts';
import { now } from './util/now.ts';
import { over } from './util/over.ts';
import { stubArray } from './util/stubArray.ts';
import { stubFalse } from './util/stubFalse.ts';
import { stubObject } from './util/stubObject.ts';
import { stubString } from './util/stubString.ts';
import { stubTrue } from './util/stubTrue.ts';
import { times } from './util/times.ts';
import { toArray } from './util/toArray.ts';
import { toFinite } from './util/toFinite.ts';
import { toInteger } from './util/toInteger.ts';
import { toLength } from './util/toLength.ts';
import { toNumber } from './util/toNumber.ts';
import { toPath } from './util/toPath.ts';
import { toPlainObject } from './util/toPlainObject.ts';
import { toSafeInteger } from './util/toSafeInteger.ts';
import { toString } from './util/toString.ts';
import { uniqueId } from './util/uniqueId.ts';

export function toolkit(value: any) {
  return value;
}

toolkit.castArray = castArray;
toolkit.chunk = chunk;
toolkit.compact = compact;
toolkit.concat = concat;
toolkit.difference = difference;
toolkit.differenceBy = differenceBy;
toolkit.differenceWith = differenceWith;
toolkit.drop = drop;
toolkit.dropRight = dropRight;
toolkit.dropRightWhile = dropRightWhile;
toolkit.dropWhile = dropWhile;
toolkit.every = every;
toolkit.fill = fill;
toolkit.filter = filter;
toolkit.find = find;
toolkit.findIndex = findIndex;
toolkit.findLast = findLast;
toolkit.findLastIndex = findLastIndex;
toolkit.flatten = flatten;
toolkit.flattenDeep = flattenDeep;
toolkit.flattenDepth = flattenDepth;
toolkit.forEach = each;
toolkit.forEach = forEach;
toolkit.head = head;
toolkit.head = first;
toolkit.includes = includes;
toolkit.indexOf = indexOf;
toolkit.intersection = intersection;
toolkit.intersectionBy = intersectionBy;
toolkit.intersectionWith = intersectionWith;
toolkit.join = join;
toolkit.last = last;
toolkit.lastIndexOf = lastIndexOf;
toolkit.map = map;
toolkit.nth = nth;
toolkit.orderBy = orderBy;
toolkit.pull = pull;
toolkit.pullAll = pullAll;
toolkit.pullAllBy = pullAllBy;
toolkit.reduce = reduce;
toolkit.reduceRight = reduceRight;
toolkit.reject = reject;
toolkit.remove = remove;
toolkit.reverse = reverse;
toolkit.sample = sample;
toolkit.size = size;
toolkit.slice = slice;
toolkit.some = some;
toolkit.sortBy = sortBy;
toolkit.sortedIndex = sortedIndex;
toolkit.sortedIndexBy = sortedIndexBy;
toolkit.sortedIndexOf = sortedIndexOf;
toolkit.sortedLastIndex = sortedLastIndex;
toolkit.sortedLastIndexBy = sortedLastIndexBy;
toolkit.tail = tail;
toolkit.take = take;
toolkit.takeRight = takeRight;
toolkit.takeRightWhile = takeRightWhile;
toolkit.takeWhile = takeWhile;
toolkit.union = union;
toolkit.unionBy = unionBy;
toolkit.unionWith = unionWith;
toolkit.uniq = uniq;
toolkit.uniqBy = uniqBy;
toolkit.uniqWith = uniqWith;
toolkit.unzip = unzip;
toolkit.without = without;
toolkit.zip = zip;
toolkit.zipObjectDeep = zipObjectDeep;

toolkit.after = after;
toolkit.ary = ary;
toolkit.attempt = attempt;
toolkit.before = before;
toolkit.bind = bind;
toolkit.bindKey = bindKey;
toolkit.curry = curry;
toolkit.curryRight = curryRight;
toolkit.debounce = debounce;
toolkit.defer = defer;
toolkit.delay = delay;
toolkit.flip = flip;
toolkit.flow = flow;
toolkit.flowRight = flowRight;
toolkit.negate = negate;
toolkit.nthArg = nthArg;
toolkit.partial = partial;
toolkit.partialRight = partialRight;
toolkit.rearg = rearg;
toolkit.rest = rest;
toolkit.spread = spread;
toolkit.throttle = throttle;

toolkit.add = add;
toolkit.ceil = ceil;
toolkit.clamp = clamp;
toolkit.divide = divide;
toolkit.floor = floor;
toolkit.inRange = inRange;
toolkit.max = max;
toolkit.maxBy = maxBy;
toolkit.mean = mean;
toolkit.meanBy = meanBy;
toolkit.min = min;
toolkit.minBy = minBy;
toolkit.multiply = multiply;
toolkit.parseInt = parseInt;
toolkit.random = random;
toolkit.range = range;
toolkit.rangeRight = rangeRight;
toolkit.round = round;
toolkit.subtract = subtract;
toolkit.sum = sum;
toolkit.sumBy = sumBy;

toolkit.assign = assign;
toolkit.assignIn = assignIn;
toolkit.assignInWith = assignInWith;
toolkit.assignWith = assignWith;
toolkit.extend = extend;
toolkit.extendWith = extendWith;
toolkit.cloneDeep = cloneDeep;
toolkit.cloneDeepWith = cloneDeepWith;
toolkit.create = create;
toolkit.defaults = defaults;
toolkit.findKey = findKey;
toolkit.fromPairs = fromPairs;
toolkit.functions = functions;
toolkit.functionsIn = functionsIn;
toolkit.get = get;
toolkit.has = has;
toolkit.invertBy = invertBy;
toolkit.keys = keys;
toolkit.keysIn = keysIn;
toolkit.mapKeys = mapKeys;
toolkit.mapValues = mapValues;
toolkit.merge = merge;
toolkit.mergeWith = mergeWith;
toolkit.omit = omit;
toolkit.pick = pick;
toolkit.pickBy = pickBy;
toolkit.property = property;
toolkit.propertyOf = propertyOf;
toolkit.set = set;
toolkit.toDefaulted = toDefaulted;
toolkit.toPairs = toPairs;
toolkit.toPairsIn = toPairsIn;
toolkit.unset = unset;
toolkit.update = update;
toolkit.updateWith = updateWith;
toolkit.values = values;
toolkit.valuesIn = valuesIn;

toolkit.conforms = conforms;
toolkit.conformsTo = conformsTo;
toolkit.isArguments = isArguments;
toolkit.isArray = isArray;
toolkit.isArrayBuffer = isArrayBuffer;
toolkit.isArrayLike = isArrayLike;
toolkit.isArrayLikeObject = isArrayLikeObject;
toolkit.isBoolean = isBoolean;
toolkit.isBuffer = isBuffer;
toolkit.isDate = isDate;
toolkit.isElement = isElement;
toolkit.isEmpty = isEmpty;
toolkit.isEqualWith = isEqualWith;
toolkit.isError = isError;
toolkit.isFinite = isFinite;
toolkit.isInteger = isInteger;
toolkit.isMap = isMap;
toolkit.isMatch = isMatch;
toolkit.isNaN = isNaN;
toolkit.isNil = isNil;
toolkit.isNumber = isNumber;
toolkit.isObject = isObject;
toolkit.isObjectLike = isObjectLike;
toolkit.isPlainObject = isPlainObject;
toolkit.isRegExp = isRegExp;
toolkit.isSafeInteger = isSafeInteger;
toolkit.isSet = isSet;
toolkit.isString = isString;
toolkit.isSymbol = isSymbol;
toolkit.isTypedArray = isTypedArray;
toolkit.isWeakMap = isWeakMap;
toolkit.isWeakSet = isWeakSet;
toolkit.matches = matches;
toolkit.matchesProperty = matchesProperty;

toolkit.camelCase = camelCase;
toolkit.deburr = deburr;
toolkit.endsWith = endsWith;
toolkit.escape = escape;
toolkit.escapeRegExp = escapeRegExp;
toolkit.kebabCase = kebabCase;
toolkit.lowerCase = lowerCase;
toolkit.lowerFirst = lowerFirst;
toolkit.pad = pad;
toolkit.padEnd = padEnd;
toolkit.padStart = padStart;
toolkit.repeat = repeat;
toolkit.replace = replace;
toolkit.snakeCase = snakeCase;
toolkit.startCase = startCase;
toolkit.startsWith = startsWith;
toolkit.template = template;
toolkit.templateSettings = templateSettings;
toolkit.toLower = toLower;
toolkit.toUpper = toUpper;
toolkit.trim = trim;
toolkit.trimEnd = trimEnd;
toolkit.trimStart = trimStart;
toolkit.unescape = unescape;
toolkit.upperCase = upperCase;
toolkit.upperFirst = upperFirst;
toolkit.words = words;

toolkit.cond = cond;
toolkit.constant = constant;
toolkit.defaultTo = defaultTo;
toolkit.eq = eq;
toolkit.gt = gt;
toolkit.gte = gte;
toolkit.invoke = invoke;
toolkit.iteratee = iteratee;
toolkit.lt = lt;
toolkit.lte = lte;
toolkit.method = method;
toolkit.methodOf = methodOf;
toolkit.now = now;

toolkit.over = over;
toolkit.stubArray = stubArray;
toolkit.stubFalse = stubFalse;
toolkit.stubObject = stubObject;
toolkit.stubString = stubString;
toolkit.stubTrue = stubTrue;
toolkit.times = times;
toolkit.toArray = toArray;
toolkit.toFinite = toFinite;
toolkit.toInteger = toInteger;
toolkit.toLength = toLength;
toolkit.toNumber = toNumber;
toolkit.toPath = toPath;
toolkit.toPlainObject = toPlainObject;
toolkit.toSafeInteger = toSafeInteger;
toolkit.toString = toString;
toolkit.uniqueId = uniqueId;

// Set the placeholder for partial and partialRight
partial.placeholder = toolkit;
partialRight.placeholder = toolkit;
